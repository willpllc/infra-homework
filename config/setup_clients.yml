# vim: set ft=ansible:
---

- name: Create Clients
  hosts: localhost
  gather_facts: False
  become: yes
  vars_files:
    - "{{ ANSIBLE_REPO_PATH }}/config/env_vars.yml"
    - "{{ ANSIBLE_REPO_PATH }}/config/clients_env_var.yml"
  tasks:
    - name: Unique list of nodes
      shell: "oc get nodes -lenv=app -o custom-columns=NAME:.metadata.name --sort-by=.metadata.name --no-headers=true 2>/dev/null"
      register: app_node_list
#      ignore_errors: yes
#      failed_when: false
      changed_when: false

    - name: Restrict nodes by node selector on client label
      shell: "{{ ANSIBLE_REPO_PATH }}/scripts/label_node {{ item.0 }} {{ item.1 }}"
      when: item.0 != ""
      with_together:
        - "{{ company_projs | map(attribute='client') | list | unique }}"
        - "{{ app_node_list.stdout_lines }}"

    - name: Check for CICD projects
      shell: "oc get project {{ item.proj }}"
      register: cicd_proj_chk
      ignore_errors: yes
      failed_when: false
      changed_when: false
      with_items: "{{ infra_projs }}"

    - name: Create CICD projects
      shell: "oc new-project {{ item.item.proj }} --display-name='{{ item.item.display }}' >/dev/null 2>&1"
      ignore_errors: yes
      check_mode: no
      when: "{{ item.rc }} != 0"
      with_items: "{{ cicd_proj_chk.results }}"

    - name: Set node-selector for CICD projects
      shell: "{{ ANSIBLE_REPO_PATH }}/scripts/set_node_selector_any {{ item.proj }}"
#      shell: "oc patch namespace beta-dev -p '{"metadata":{"annotations":{"openshift.io/node-selector":"env=app,client=beta"}}}'"
      ignore_errors: yes
      check_mode: no
      with_items: "{{ infra_projs }}"

    - name: Check for Company projects
      shell: "oc get project {{ item.proj }}"
#      with_dict: "{{ company_projs }}"
      register: proj_chk
      ignore_errors: yes
      failed_when: false
      changed_when: false
      with_items: "{{ company_projs }}"
#      with_subelements:
#        - "{{ company_projs }}"
#        - display

#    - debug: var=proj_chk

    - name: Create Company projects
      shell: "oc new-project {{ item.item.proj }} --display-name='{{ item.item.display }}' >/dev/null 2>&1"
#      debug: msg="proj is {{ item.item.proj }} display is {{ item.item.display }}"
      ignore_errors: yes
      check_mode: no
      when: "{{ item.rc }} != 0"
      with_items: "{{ proj_chk.results }}"

    - name: Set node-selector for projects
      shell: "{{ ANSIBLE_REPO_PATH }}/scripts/set_node_selector {{ item.proj }} {{ item.client }}"
#      shell: "oc patch namespace beta-dev -p '{"metadata":{"annotations":{"openshift.io/node-selector":"env=app,client=beta"}}}'"
#      debug: msg="proj is {{ item.item.proj }} display is {{ item.item.display }}"
      ignore_errors: yes
      check_mode: no
      with_items: "{{ company_projs }}"

    - name: Pause for projects to be instantiated
      shell: "sleep 5"
      changed_when: false

    - name: Label CICD namespaces
      shell: "oc label namespace {{ item.item.proj }} client={{ item.item.client }}"
      ignore_errors: yes
      check_mode: no
      with_items: "{{ cicd_proj_chk.results }}"
      failed_when: false

    - name: Label client namespaces
      shell: "oc label namespace {{ item.item.proj }} client={{ item.item.client }}"
      ignore_errors: yes
      check_mode: no
      with_items: "{{ proj_chk.results }}"
      failed_when: false

#    - name: Delete limits for cicd
#      shell: "oc delete limits core-resource-limits -n {{ cicd_project }} >/dev/null 2>&1"
#      ignore_errors: yes
#      check_mode: no
#      with_items: "{{ proj_chk.results }}"
#
    - name: Check for Users
      shell: "oc get user {{ item.key }} >/dev/null 2>&1"
      with_dict: "{{ company_users }}"
      register: user_chk
      failed_when: false
      changed_when: false
      ignore_errors: yes
    - name: Create Users
      shell: "oc create user {{ item.item.key }} >/dev/null 2>&1"
      ignore_errors: yes
      check_mode: no
      when: "{{ item.rc }} != 0"
      with_items: "{{ user_chk.results }}"

    - name: Check for Identities
      shell: "oc get identity htpasswd_auth:{{ item.key }} >/dev/null 2>&1"
      with_dict: "{{ company_users }}"
      register: id_chk
      failed_when: false
      changed_when: false
      ignore_errors: yes

    - name: Create Identies
      shell: "oc create identity htpasswd_auth:{{ item.item.key }} >/dev/null 2>&1"
      ignore_errors: yes
      check_mode: no
      when: "{{ item.rc }} != 0"
      with_items: "{{ id_chk.results }}"

    - name: Create Identity mappings
      shell: "oc create useridentitymapping htpasswd_auth:{{ item.key }} {{ item.key }} >/dev/null 2>&1"
      with_dict: "{{ company_users }}"
      register: out
      ignore_errors: yes
      failed_when: false
      check_mode: no

    - name: Add cluster-admins
      shell: "oc adm policy add-cluster-role-to-user cluster-admin {{ item.key }} >/dev/null 2>&1"
      with_dict: "{{ cadmins_users }}"
      register: cadmins_chk
      failed_when: false
      changed_when: false
      ignore_errors: yes
      check_mode: no

#    - name: Add admin for projects
#      shell: "oc adm policy add-role-to-user admin {{ item.1 }} -n {{ item.0.proj }}"
##      debug: msg="0 is {{ item.0.proj }} admin is {{ item.1 }}"
#      with_subelements:
#        - "{{ company_projs }}"
#        - users

    - name: Create group for each client
      shell: "oc adm groups new client-group-{{ item }}"
      with_items: "{{ company_projs | map(attribute='client') | list | unique }}"
      failed_when: false
      ignore_errors: yes
      check_mode: no

    - name: Add users to groups
      shell: "oc adm groups add-users client-group-{{ item.0.client }} {{ item.1 }}"
      with_subelements:
        - "{{ company_projs }}"
        - users
      failed_when: false
      ignore_errors: yes
      check_mode: no

    - name: Add label to group
      shell: "oc label group/client-group-{{ item }} client={{ item }}"
      with_items: "{{ company_projs | map(attribute='client') | list | unique }}"
      failed_when: false
      ignore_errors: yes
      check_mode: no

#HERE
    - name: Add admin role for group to projects
      shell: "oc adm policy add-role-to-group admin client-group-{{ item.client }} -n {{ item.proj }}"
#      shell: "oc adm policy add-role-to-group basic-user client-group-{{ item.client }} -n {{ item.proj }}"
      with_items: "{{ company_projs }}"
      failed_when: false
      ignore_errors: yes
      check_mode: no

#      shell: "{{ ANSIBLE_REPO_PATH }}/scripts/label_node {{ item.0 }} {{ item.1 }}"
#      when: item.0 != ""
#      with_together:
#        - "{{ company_projs | map(attribute='client') | list | unique }}"
#        - "{{ app_node_list.stdout_lines }}"

    - name: Add jenkins service account to projects
      shell: "oc policy add-role-to-user edit system:serviceaccount:{{ cicd_project }}:jenkins -n {{ item.proj }} >/dev/null 2>&1"
      ignore_errors: yes
      check_mode: no
      with_items: "{{ company_projs }}"

    - name: Join projects
      shell: "oc adm pod-network join-projects --to={{ cicd_project }} {{ item.proj }} >/dev/null 2>&1"
      ignore_errors: yes
      check_mode: no
      with_items: "{{ company_projs }}"
      when: ovs_plugin == "multitenant"
      failed_when: false

    - name: Update cicd project
      shell: "oc delete resourcequotas core-resource-quota -n {{ cicd_project }} >/dev/null 2>&1"
      ignore_errors: yes
      check_mode: no
      failed_when: false

    - name: Wait for things to complete
      shell: "sleep 5"
      changed_when: false

